security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        security_mongo_provider:
            mongodb: { class: App\MainBundle\Document\User, property: email }
        security_mongo_api_token_provider:
            mongodb: { class: App\MainBundle\Document\User, property: apiToken }

    encoders:
        # bcrypt or argon21 are recommended
        # argon21 is more secure, but requires PHP 7.2 or the Sodium extension
        App\MainBundle\Document\User:
            algorithm: auto
            cost: 12

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            switch_user: true
            provider: security_mongo_provider
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
                - App\Security\TokenAuthenticator
            entry_point: App\Security\AuthenticationEntryPoint
            logout:
                path: app_logout
                target: homepage
            remember_me:
                secret: '%env(APP_SECRET)%'
                lifetime: 604800 # 1 week in seconds
                path: /
            login_throttling:
                max_attempts: 3
                interval: '15 minutes'

#            form_login:
#                login_path: app_login
#                check_path: app_login
#                csrf_token_generator: security.csrf.token_manager
#                default_target_path: homepage
#                target_path_parameter: go_to
#                failure_path_parameter: back_to

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_ADMIN_WRITE: ROLE_ADMIN
        ROLE_SUPER_ADMIN: [ROLE_ADMIN_WRITE, ROLE_ALLOWED_TO_SWITCH]

    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile/, roles: ROLE_USER }
        - { path: ^/api/, roles: ROLE_USER }
